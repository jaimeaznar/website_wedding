(venv) jaimeaznar@Jaimes-MacBook-Pro-2 website_wedding % pytest -v                            
============================================ test session starts =============================================
platform darwin -- Python 3.13.1, pytest-7.4.3, pluggy-1.5.0 -- /Users/jaimeaznar/Desktop/website_wedding/venv/bin/python3.13
cachedir: .pytest_cache
rootdir: /Users/jaimeaznar/Desktop/website_wedding
plugins: flask-1.3.0, cov-4.1.0, mock-3.14.0, flask-sqlalchemy-1.1.0
collected 37 items                                                                                           

tests/test_functional.py::TestMainNavigation::test_home_page PASSED                                    [  2%]
tests/test_functional.py::TestRSVPProcess::test_rsvp_attending_flow PASSED                             [  5%]
tests/test_functional.py::TestRSVPProcess::test_rsvp_not_attending_flow PASSED                         [  8%]
tests/test_functional.py::TestAdminInterface::test_admin_login_and_dashboard PASSED                    [ 10%]
tests/test_functional.py::TestAdminInterface::test_admin_add_guest PASSED                              [ 13%]
tests/test_models.py::TestGuestModel::test_create_guest PASSED                                         [ 16%]
tests/test_models.py::TestGuestModel::test_guest_rsvp_relationship PASSED                              [ 18%]
tests/test_models.py::TestRSVPModel::test_create_rsvp ERROR                                            [ 21%]
tests/test_models.py::TestRSVPModel::test_is_editable_property ERROR                                   [ 24%]
tests/test_models.py::TestRSVPModel::test_cancel_method ERROR                                          [ 27%]
tests/test_models.py::TestAllergenModel::test_create_allergen PASSED                                   [ 29%]
tests/test_models.py::TestAllergenModel::test_create_guest_allergen ERROR                              [ 32%]
tests/test_models.py::TestAdditionalGuestModel::test_create_additional_guest ERROR                     [ 35%]
tests/test_routes.py::TestMainRoutes::test_index_route PASSED                                          [ 37%]
tests/test_routes.py::TestMainRoutes::test_schedule_route PASSED                                       [ 40%]
tests/test_routes.py::TestMainRoutes::test_venue_route PASSED                                          [ 43%]
tests/test_routes.py::TestMainRoutes::test_language_switching PASSED                                   [ 45%]
tests/test_routes.py::TestRSVPRoutes::test_rsvp_landing PASSED                                         [ 48%]
tests/test_routes.py::TestRSVPRoutes::test_rsvp_form_with_valid_token ERROR                            [ 51%]
tests/test_routes.py::TestRSVPRoutes::test_rsvp_form_with_invalid_token PASSED                         [ 54%]
tests/test_routes.py::TestRSVPRoutes::test_rsvp_submission ERROR                                       [ 56%]
tests/test_routes.py::TestRSVPRoutes::test_rsvp_cancel ERROR                                           [ 59%]
tests/test_routes.py::TestAdminRoutes::test_admin_login_page PASSED                                    [ 62%]
tests/test_routes.py::TestAdminRoutes::test_admin_login_success PASSED                                 [ 64%]
tests/test_routes.py::TestAdminRoutes::test_admin_dashboard PASSED                                     [ 67%]
tests/test_routes.py::TestAdminRoutes::test_admin_add_guest PASSED                                     [ 70%]
tests/test_routes.py::TestAdminRoutes::test_admin_download_template PASSED                             [ 72%]
tests/test_routes.py::TestAdminRoutes::test_admin_logout PASSED                                        [ 75%]
tests/test_utils.py::TestImportGuests::test_process_guest_csv_valid PASSED                             [ 78%]
tests/test_utils.py::TestImportGuests::test_process_guest_csv_missing_headers PASSED                   [ 81%]
tests/test_utils.py::TestImportGuests::test_process_guest_csv_missing_required_fields PASSED           [ 83%]
tests/test_utils.py::TestRSVPHelpers::test_process_allergens ERROR                                     [ 86%]
tests/test_utils.py::TestRSVPValidator::test_validate_attendance PASSED                                [ 89%]
tests/test_utils.py::TestRSVPValidator::test_validate_transport PASSED                                 [ 91%]
tests/test_utils.py::TestRSVPValidator::test_validate_family_members PASSED                            [ 94%]
tests/test_utils.py::TestRSVPProcessor::test_process_success ERROR                                     [ 97%]
tests/test_utils.py::TestRSVPProcessor::test_process_validation_failure ERROR                          [100%]

=================================================== ERRORS ===================================================
______________________________ ERROR at setup of TestRSVPModel.test_create_rsvp ______________________________

self = <sqlalchemy.engine.base.Connection object at 0x112f6c410>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112f9ecf0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x112e8afd0>
parameters = [('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x112f99e40>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112f9ecf0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: guest.token

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError

The above exception was the direct cause of the following exception:

app = <Flask 'app'>

    @pytest.fixture(scope='function')
    def sample_guest(app):
        """Create a sample guest."""
        with app.app_context():
            guest = Guest(
                name="Test Guest",
                email="test@example.com",
                phone="1234567890",
                token="test-token",
                language_preference="en",
                has_plus_one=True,
                is_family=False
            )
            db.session.add(guest)
>           db.session.commit()

tests/conftest.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:599: in commit
    return self._proxied.commit()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x112f99e40>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112f9ecf0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
E       [SQL: INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)]
E       [parameters: ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, 0, 0, '2025-03-11 14:29:08.475976')]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError
_________________________ ERROR at setup of TestRSVPModel.test_is_editable_property __________________________

self = <sqlalchemy.engine.base.Connection object at 0x112f6f710>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x113c5cd70>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x112e8afd0>
parameters = [('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x114400a40>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x113c5cd70>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: guest.token

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError

The above exception was the direct cause of the following exception:

app = <Flask 'app'>

    @pytest.fixture(scope='function')
    def sample_guest(app):
        """Create a sample guest."""
        with app.app_context():
            guest = Guest(
                name="Test Guest",
                email="test@example.com",
                phone="1234567890",
                token="test-token",
                language_preference="en",
                has_plus_one=True,
                is_family=False
            )
            db.session.add(guest)
>           db.session.commit()

tests/conftest.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:599: in commit
    return self._proxied.commit()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x114400a40>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x113c5cd70>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
E       [SQL: INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)]
E       [parameters: ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, 0, 0, '2025-03-11 14:29:08.830431')]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError
_____________________________ ERROR at setup of TestRSVPModel.test_cancel_method _____________________________

self = <sqlalchemy.engine.base.Connection object at 0x112f6f890>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112caadd0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x112e8afd0>
parameters = [('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x113d7ce40>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112caadd0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: guest.token

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError

The above exception was the direct cause of the following exception:

app = <Flask 'app'>

    @pytest.fixture(scope='function')
    def sample_guest(app):
        """Create a sample guest."""
        with app.app_context():
            guest = Guest(
                name="Test Guest",
                email="test@example.com",
                phone="1234567890",
                token="test-token",
                language_preference="en",
                has_plus_one=True,
                is_family=False
            )
            db.session.add(guest)
>           db.session.commit()

tests/conftest.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:599: in commit
    return self._proxied.commit()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x113d7ce40>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112caadd0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
E       [SQL: INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)]
E       [parameters: ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, 0, 0, '2025-03-11 14:29:09.131373')]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError
_______________________ ERROR at setup of TestAllergenModel.test_create_guest_allergen _______________________

self = <sqlalchemy.engine.base.Connection object at 0x112f6c710>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112fe4130>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x112e8afd0>
parameters = [('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x113e1d440>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112fe4130>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: guest.token

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError

The above exception was the direct cause of the following exception:

app = <Flask 'app'>

    @pytest.fixture(scope='function')
    def sample_guest(app):
        """Create a sample guest."""
        with app.app_context():
            guest = Guest(
                name="Test Guest",
                email="test@example.com",
                phone="1234567890",
                token="test-token",
                language_preference="en",
                has_plus_one=True,
                is_family=False
            )
            db.session.add(guest)
>           db.session.commit()

tests/conftest.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:599: in commit
    return self._proxied.commit()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x113e1d440>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112fe4130>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
E       [SQL: INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)]
E       [parameters: ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, 0, 0, '2025-03-11 14:29:09.444385')]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError
__________________ ERROR at setup of TestAdditionalGuestModel.test_create_additional_guest ___________________

self = <sqlalchemy.engine.base.Connection object at 0x113890ad0>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112fe6190>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x112e8afd0>
parameters = [('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x11421f5c0>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112fe6190>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: guest.token

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError

The above exception was the direct cause of the following exception:

app = <Flask 'app'>

    @pytest.fixture(scope='function')
    def sample_guest(app):
        """Create a sample guest."""
        with app.app_context():
            guest = Guest(
                name="Test Guest",
                email="test@example.com",
                phone="1234567890",
                token="test-token",
                language_preference="en",
                has_plus_one=True,
                is_family=False
            )
            db.session.add(guest)
>           db.session.commit()

tests/conftest.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:599: in commit
    return self._proxied.commit()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x11421f5c0>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112fe6190>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
E       [SQL: INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)]
E       [parameters: ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, 0, 0, '2025-03-11 14:29:09.759745')]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError
______________________ ERROR at setup of TestRSVPRoutes.test_rsvp_form_with_valid_token ______________________

self = <sqlalchemy.engine.base.Connection object at 0x112f6f110>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112cab5b0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x112e8afd0>
parameters = [('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x112f99cc0>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112cab5b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: guest.token

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError

The above exception was the direct cause of the following exception:

app = <Flask 'app'>

    @pytest.fixture(scope='function')
    def sample_guest(app):
        """Create a sample guest."""
        with app.app_context():
            guest = Guest(
                name="Test Guest",
                email="test@example.com",
                phone="1234567890",
                token="test-token",
                language_preference="en",
                has_plus_one=True,
                is_family=False
            )
            db.session.add(guest)
>           db.session.commit()

tests/conftest.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:599: in commit
    return self._proxied.commit()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x112f99cc0>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112cab5b0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
E       [SQL: INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)]
E       [parameters: ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, 0, 0, '2025-03-11 14:29:10.132602')]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError
___________________________ ERROR at setup of TestRSVPRoutes.test_rsvp_submission ____________________________

self = <sqlalchemy.engine.base.Connection object at 0x112f6fd10>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x113c5c750>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x112e8afd0>
parameters = [('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x113d7ccc0>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x113c5c750>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: guest.token

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError

The above exception was the direct cause of the following exception:

app = <Flask 'app'>

    @pytest.fixture(scope='function')
    def sample_guest(app):
        """Create a sample guest."""
        with app.app_context():
            guest = Guest(
                name="Test Guest",
                email="test@example.com",
                phone="1234567890",
                token="test-token",
                language_preference="en",
                has_plus_one=True,
                is_family=False
            )
            db.session.add(guest)
>           db.session.commit()

tests/conftest.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:599: in commit
    return self._proxied.commit()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x113d7ccc0>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x113c5c750>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
E       [SQL: INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)]
E       [parameters: ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, 0, 0, '2025-03-11 14:29:10.447249')]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError
_____________________________ ERROR at setup of TestRSVPRoutes.test_rsvp_cancel ______________________________

self = <sqlalchemy.engine.base.Connection object at 0x112f6f050>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112fe4130>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x112e8afd0>
parameters = [('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x114370540>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112fe4130>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: guest.token

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError

The above exception was the direct cause of the following exception:

app = <Flask 'app'>

    @pytest.fixture(scope='function')
    def sample_guest(app):
        """Create a sample guest."""
        with app.app_context():
            guest = Guest(
                name="Test Guest",
                email="test@example.com",
                phone="1234567890",
                token="test-token",
                language_preference="en",
                has_plus_one=True,
                is_family=False
            )
            db.session.add(guest)
>           db.session.commit()

tests/conftest.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:599: in commit
    return self._proxied.commit()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x114370540>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112fe4130>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
E       [SQL: INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)]
E       [parameters: ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, 0, 0, '2025-03-11 14:29:10.744565')]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError
__________________________ ERROR at setup of TestRSVPHelpers.test_process_allergens __________________________

self = <sqlalchemy.engine.base.Connection object at 0x113891190>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x113bb4670>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x112e8afd0>
parameters = [('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x11351dbc0>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x113bb4670>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: guest.token

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError

The above exception was the direct cause of the following exception:

app = <Flask 'app'>

    @pytest.fixture(scope='function')
    def sample_guest(app):
        """Create a sample guest."""
        with app.app_context():
            guest = Guest(
                name="Test Guest",
                email="test@example.com",
                phone="1234567890",
                token="test-token",
                language_preference="en",
                has_plus_one=True,
                is_family=False
            )
            db.session.add(guest)
>           db.session.commit()

tests/conftest.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:599: in commit
    return self._proxied.commit()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x11351dbc0>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x113bb4670>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
E       [SQL: INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)]
E       [parameters: ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, 0, 0, '2025-03-11 14:29:11.482315')]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError
__________________________ ERROR at setup of TestRSVPProcessor.test_process_success __________________________

self = <sqlalchemy.engine.base.Connection object at 0x112f6f590>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112f9eeb0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x112e8afd0>
parameters = [('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x113932fc0>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112f9eeb0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: guest.token

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError

The above exception was the direct cause of the following exception:

app = <Flask 'app'>

    @pytest.fixture(scope='function')
    def sample_guest(app):
        """Create a sample guest."""
        with app.app_context():
            guest = Guest(
                name="Test Guest",
                email="test@example.com",
                phone="1234567890",
                token="test-token",
                language_preference="en",
                has_plus_one=True,
                is_family=False
            )
            db.session.add(guest)
>           db.session.commit()

tests/conftest.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:599: in commit
    return self._proxied.commit()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x113932fc0>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x112f9eeb0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
E       [SQL: INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)]
E       [parameters: ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, 0, 0, '2025-03-11 14:29:11.800793')]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError
____________________ ERROR at setup of TestRSVPProcessor.test_process_validation_failure _____________________

self = <sqlalchemy.engine.base.Connection object at 0x113891910>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x113bb5ef0>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x112e8afd0>
parameters = [('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -> CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
>                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x113e1f840>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x113bb5ef0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: UNIQUE constraint failed: guest.token

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError

The above exception was the direct cause of the following exception:

app = <Flask 'app'>

    @pytest.fixture(scope='function')
    def sample_guest(app):
        """Create a sample guest."""
        with app.app_context():
            guest = Guest(
                name="Test Guest",
                email="test@example.com",
                phone="1234567890",
                token="test-token",
                language_preference="en",
                has_plus_one=True,
                is_family=False
            )
            db.session.add(guest)
>           db.session.commit()

tests/conftest.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.13/site-packages/sqlalchemy/orm/scoping.py:599: in commit
    return self._proxied.commit()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:2032: in commit
    trans.commit(_to_root=True)
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1313: in commit
    self._prepare_impl()
venv/lib/python3.13/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:1288: in _prepare_impl
    self.session.flush()
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4353: in flush
    self._flush(objects)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4488: in _flush
    with util.safe_reraise():
venv/lib/python3.13/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
venv/lib/python3.13/site-packages/sqlalchemy/orm/session.py:4449: in _flush
    flush_context.execute()
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
venv/lib/python3.13/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
venv/lib/python3.13/site-packages/sqlalchemy/orm/persistence.py:1233: in _emit_insert_statements
    result = connection.execute(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
venv/lib/python3.13/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1638: in _execute_clauseelement
    ret = self._execute_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1843: in _execute_context
    return self._exec_single_context(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1983: in _exec_single_context
    self._handle_dbapi_exception(
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:2352: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
venv/lib/python3.13/site-packages/sqlalchemy/engine/base.py:1964: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x112d36900>
cursor = <sqlite3.Cursor object at 0x113e1f840>
statement = 'INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
parameters = ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, ...)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x113bb5ef0>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
E       [SQL: INSERT INTO guest (name, phone, email, token, language_preference, has_plus_one, plus_one_used, is_family, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)]
E       [parameters: ('Test Guest', '1234567890', 'test@example.com', 'test-token', 'en', 1, 0, 0, '2025-03-11 14:29:12.105836')]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

venv/lib/python3.13/site-packages/sqlalchemy/engine/default.py:942: IntegrityError
============================================== warnings summary ==============================================
tests/test_models.py::TestGuestModel::test_guest_rsvp_relationship
  /Users/jaimeaznar/Desktop/website_wedding/tests/test_models.py:49: LegacyAPIWarning: The Query.get() method is considered legacy as of the 1.x series of SQLAlchemy and becomes a legacy construct in 2.0. The method is now available as Session.get() (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    guest = Guest.query.get(sample_guest.id)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
========================================== short test summary info ===========================================
ERROR tests/test_models.py::TestRSVPModel::test_create_rsvp - sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
ERROR tests/test_models.py::TestRSVPModel::test_is_editable_property - sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
ERROR tests/test_models.py::TestRSVPModel::test_cancel_method - sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
ERROR tests/test_models.py::TestAllergenModel::test_create_guest_allergen - sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
ERROR tests/test_models.py::TestAdditionalGuestModel::test_create_additional_guest - sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
ERROR tests/test_routes.py::TestRSVPRoutes::test_rsvp_form_with_valid_token - sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
ERROR tests/test_routes.py::TestRSVPRoutes::test_rsvp_submission - sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
ERROR tests/test_routes.py::TestRSVPRoutes::test_rsvp_cancel - sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
ERROR tests/test_utils.py::TestRSVPHelpers::test_process_allergens - sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
ERROR tests/test_utils.py::TestRSVPProcessor::test_process_success - sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
ERROR tests/test_utils.py::TestRSVPProcessor::test_process_validation_failure - sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: guest.token
================================== 26 passed, 1 warning, 11 errors in 4.34s ==================================
(venv) jaimeaznar@Jaimes-MacBook-Pro-2 website_wedding % 